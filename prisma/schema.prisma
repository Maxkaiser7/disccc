// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  published Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Event         Event[]
  Comments      Comments[]
  Artist        Artist[]
  likes         Likes[]
  Organisation  Organisation[]
  role          UserRole       @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Artist {
  id              String            @id @default(cuid())
  artistName      String
  image           String
  User            User              @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime          @default(now())
  description     String?
  genres          Genres            @relation(fields: [genresId], references: [id])
  genresId        String
  Likes           Likes[]
  Songs           Songs[]
  ArtistsOnEvents ArtistsOnEvents[]
  Event           Event[]
  soundcloudLink  String?
  instagramLink   String?
  tiktokLink      String?
  twitterLink     String?
  appleLink       String?
  deezerLink      String?
  spotifyLink     String?
}

model Event {
  id                   String            @id @default(cuid())
  description          String
  name                 String
  unsignedArtists      String[]
  image                String?
  User                 User              @relation(fields: [userId], references: [id])
  userId               String
  createdAt            DateTime          @default(now())
  dateFrom             DateTime
  dateTo               DateTime
  price                Float
  facebookLink         String?
  address              Json
  Comments             Comments[]
  ArtistsOnEvents      ArtistsOnEvents[]
  genres               Genres            @relation(fields: [genresId], references: [id])
  genresId             String
  unsignedOrganisation String[]
  artist               Artist?           @relation(fields: [artistId], references: [id])
  artistId             String?
  organisation         Organisation?     @relation(fields: [organisationId], references: [id])
  organisationId       String?
  Likes                Likes[]
}

model Organisation {
  id               String            @id @default(cuid())
  organisationName String
  image            String
  User             User              @relation(fields: [userId], references: [id])
  userId           String
  createdAt        DateTime          @default(now())
  description      String?
  ArtistsOnEvents  ArtistsOnEvents[]
  Likes            Likes[]
  Event            Event[]
}

model ArtistsOnEvents {
  artists        Artist        @relation(fields: [artistId], references: [id])
  artistId       String
  event          Event         @relation(fields: [eventId], references: [id])
  eventId        String
  Organisation   Organisation? @relation(fields: [organisationId], references: [id])
  organisationId String?

  @@id([artistId, eventId])
}

model Genres {
  id     String   @id @default(cuid())
  nom    String
  Artist Artist[]
  Event  Event[]
}

model Likes {
  id             String        @id @default(cuid())
  type           String
  artist         Artist?       @relation(fields: [artistId], references: [id])
  comments       Comments?     @relation(fields: [commentsId], references: [id])
  song           Songs?        @relation(fields: [songsId], references: [id])
  event          Event?        @relation(fields: [eventId], references: [id])
  artistId       String?
  commentsId     String?
  songsId        String?
  User           User          @relation(fields: [userId], references: [id])
  userId         String
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  organisationId String?
  eventId        String?
}

model Comments {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  type      String
  user      User     @relation(fields: [userId], references: [id])
  event     Event?   @relation(fields: [eventId], references: [id])
  song      Songs?   @relation(fields: [songsId], references: [id])
  likes     Likes[]
  userId    String
  eventId   String?
  songsId   String?
}

model Songs {
  id       String     @id @default(cuid())
  link     String
  artist   Artist     @relation(fields: [artistId], references: [id])
  comments Comments[]
  likes    Likes[]
  artistId String
}
